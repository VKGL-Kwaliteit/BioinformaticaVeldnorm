{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>In the past years bioinformatics has become a crucial part of several medical laboratories, such as Genetics, Pathology and Medical Microbiology. In the Netherlands these laboratories are accredited according to ISO-15189 and have to follow European and national laws. Hence, bioinformaticians need to comply to both the ISO-15189, the IVDR and the GDPR.</p> <p>The ISO-15189 does not include specific requirements for bioinformatic or software development processes. The IEC-62304, however, is a harmonized standard about \"Medical device software \u2013 Software life cycle processes\" and can be used, as it complements the general requirements as described in ISO-15189 <sup>1</sup>. Whilst the use of this standard remains voluntary, it nonetheless gives good guidance on how to achieve compliance with legal requirements.</p> <p>We therefore used the IEC-62304 as a guide to create a field standard for bioinformatics, in order to make sure that the software we create is developed and manufactured in accordance with state-of-the-art principles for development life cycles, and risk management, including verification and validation, as required by the IVDR (Annex I, point 16). Note however, that we only focussed on the documentation needed for IEC-62304 Software Class A.</p> <p>The main goal of this document is to give guidance on what should be documented to comply to the ISO-15189 norm and the IVDR. We tried to make pragmatic choices, and provide clarity on what should be documented.</p> <p>While we were writing this field standard, it became clear to us that the size of bioinformatics teams varies. As a consequence, in particular when there is only a single bioinformatician working for the medical laboratory, some of the items described in this field standard will be rather difficult to incorporate. While this field standard does describe the need to comply to the IVDR and the ISO-15189, it might be impossible to comply to this field standard due to the lack of personnel. Make sure choices in such cases are well motivated and documented, and remember to revise these choices once the team has expanded.</p>"},{"location":"#in-scope","title":"In scope","text":"<ul> <li>Bioinformatic workflows that generate results that are checked and interpreted under the supervision of trained clinical laboratory specialists.</li> <li>Bioinformatic workflows that are in-house IVDs for which only article 5.5 of the IVDR applies.</li> </ul>"},{"location":"#out-of-scope","title":"Out of scope","text":"<ul> <li>Bioinformatic workflows for which the results are used within health care institutions without interpretation by trained clinical laboratory specialists. For these workflows more documentation is needed, as they are most likely Class B or C in the IEC-62304. The same holds for workflows that include AI.</li> <li>Personnel (6.2 in ISO-15189:2022), as this should be covered by QMS of the medical Laboratory already.</li> <li>Datamanagement and retention periods of data are mentioned in another field standard <sup>2</sup>.</li> </ul>"},{"location":"#software-safety-classication-according-to-the-iec-62304","title":"Software Safety Classication according to the IEC-62304 <sup>3</sup>","text":"<p>The SOFTWARE SYSTEM is software safety class A if:</p> <ul> <li>The SOFTWARE SYSTEM cannot contribute to a HAZARDOUS SITUATION; or</li> <li>The SOFTWARE SYSTEM can contribute to a HAZARDOUS SITUATION which does not result in unacceptable RISK after consideration of RISK CONTROL measures external to the SOFTWARE SYSTEM.</li> </ul> <p>The SOFTWARE SYSTEM is software safety class B if:</p> <ul> <li>The SOFTWARE SYSTEM can contribute to a HAZARDOUS SITUATION which results in unacceptable RISK after consideration of RISK CONTROL measures external to the SOFTWARE SYSTEM and the resulting possible HARM is non-SERIOUS INJURY.</li> </ul> <p>The SOFTWARE SYSTEM is software safety class C if:</p> <ul> <li>The SOFTWARE SYSTEM can contribute to a HAZARDOUS SITUATION which results in unacceptable RISK after consideration of RISK CONTROL measures external to the SOFTWARE SYSTEM and the resulting possible HARM is death or SERIOUS INJURY.</li> </ul> <pre><code>flowchart TD\n    A(\"software is Class C (default)\") --&gt; B{Can a hazardous &lt;br&gt; situation arise from a &lt;br&gt; failure of the software}\n    B --&gt;|Yes| C[[Evaulate effectiveness &lt;br&gt; of risk control measures &lt;br&gt; external to software]]\n    C --&gt; D{Can failure of the &lt;br&gt; software result in &lt;br&gt; unacceptable risk?}\n    D --&gt;|Yes| E{What severity of &lt;br&gt; injury is possible}\n    E --&gt;|non serious injury| G(Class B)\n    E --&gt;|serious injury or death| H(Class C)\n    B --&gt;|No| F(Class A)\n    D --&gt;|No| F(Class A)</code></pre> <p>Flowdiagram adapted from IEC-62304, Figure 3 \u2013 Assigning software safety classification.</p> <p>In determining the software safety classification of the SOFTWARE SYSTEM:</p> <ul> <li>Probability of a software failure shall be assured to be 1.</li> <li>Only RISK CONTROL measures not implemented within (External to) the SOFTWARE SYTEM shall be considered.</li> </ul> <p>Such RISK CONTROL measures may reduce the probability that a software failure will cause HARM, and/or the severity of that HARM.      </p> <ol> <li> <p>van Deutekom HWM, Haitjema S. Recommendations for IVDR compliant in-house software development in clinical practice: a how-to paper with three use cases. Clin Chem Lab Med. 2022. PMID: 35538674.\u00a0\u21a9</p> </li> <li> <p>Veldnorm VKGL.\u00a0\u21a9</p> </li> <li> <p>IEC-62304: Medical device software \u2013 software life cycle processes\u00a0\u21a9</p> </li> </ol>"},{"location":"abbreviations/","title":"Abbreviations and Definitions","text":""},{"location":"abbreviations/#abbreviations","title":"Abbreviations","text":"<ul> <li>GIAB: Genome In A Bottle</li> <li>FMEA: Failure Mode and Effects Analysis</li> <li>GDPR: General Data Protection Regulation</li> <li>IEC: International Electrotechnical Commission</li> <li>IGV: Integrative Genomics Viewer</li> <li>IMDRF: International Medical Device Regulators Forum</li> <li>ISO: International Organization for Standardization</li> <li>IVDR: In Vitro Diagnostics Regulation</li> <li>MDR: Medical Device Regulation</li> <li>MDSW: Medical Device SoftWare</li> <li>QMS: Quality Management System</li> <li>SAFER: Stop, Assess, Formulate, Execute, and Review</li> <li>SaMD: Software as a Medical Device</li> <li>SDLC: Software Development Life Cycle</li> <li>SMART: Specific, Measurable, Achievable, Realistic, and Timely</li> <li>SOP: Standard Operating Procedure</li> <li>SOUP: Software of Unknown Provenance</li> <li>WES: Whole Exome Sequencing</li> </ul>"},{"location":"abbreviations/#definitions","title":"Definitions","text":"<ul> <li>End users - The group that will actually use the software developed by bioinformaticians</li> <li>Git - A distributed version control system that tracks changes in any set of computer files. </li> </ul>"},{"location":"configuration_management/","title":"Configuration management","text":"<p>Configuration management is essential when keeping track of different versions of software that may exhibit different capabilities and dependencies. Therefore, a concise regulation of development versioning should be in place. Each release of a new version of software should be identifiable by a specific version number for reference purposes. These version releases may be related to updates of different sizes (e.g. they may concern a major change in structure and capability, or they may just entail a small bugfix). A standardized versioning scheme should be implemented for software components. The version number should follow the format <code>major.minor.patch</code>, adhering to the Semantic Versioning principles (see https://semver.org). This number may be extended if necessary (e.g. <code>major.minor.patch.build</code>), so long as it at least contains the major, minor and patch numbers and it is documented clearly.</p> <ul> <li>Major changes: In general, major version updates indicate significant changes that are not backward compatible. They may include structural changes or changed dependencies.</li> <li>Minor changes: Minor version updates usually represent the addition of new features or functionality without breaking compatibility with the existing system.</li> <li>Patches: Patches address critical bugs and issues that require immediate attention. They do not introduce new features and can be used to quickly restore errors in code that were not detected during testing. They may also include small updates with little change to the software.</li> </ul> <p>The exact definitions of these kinds of updates may differ between workplaces and should be discussed and documented clearly.</p>"},{"location":"contact/","title":"Contact","text":"<p>With the arrival of the IVDR, and the need for audits on bioinformatics by an accreditation body authorities such as the Raad voor Accreditatie, there was a need for a field standard for bioinformatics, as from the ISO-15189 it is unclear what to audit for bioinformatics. This field standard has been initiated by Hanneke van Deutekom, member of the quality committee of the VKGL and technical assessor bioinformatics at the Raad voor Accreditatie.</p> <p>Bioinformaticians from all the genetic medical laboratories in the Netherlands gathered to discuss the processes used to develop software. The processes within the different centers and the IEC-62304 were used as a guidance to create this field standard for bioinformatics.</p> <p>The following people were involved with writing and reviewing.</p> <ul> <li>Tobias Beers, Department of Pathology, Antoni van Leeuwenhoek \u2013 Netherlands Cancer Institute (AvL-NKI), Amsterdam, the Netherlands</li> <li>Roxane E. Boyer, Department of Human Genetics, Amsterdam University Medical Center, Amsterdam, the Netherlands</li> <li>Hanneke W. M. van Deutekom, Department of Genetics, University Medical Center Utrecht, Utrecht, the Netherlands</li> <li>Robert F. Ernst, Department of Genetics, University Medical Center Utrecht, Utrecht, the Netherlands</li> <li>Geert Geeven, Department of Clinical Genetics, Erasmus MC, University Medical Center Rotterdam, Rotterdam, the Netherlands</li> <li>Bart de Koning, Department of Clinical Genetics, Maastricht University Medical Center+, Maastricht, the Netherlands</li> <li>Thomas Leenders, Department of Human Genetics, Radboud University Medical Center, Nijmegen, the Netherlands</li> <li>Rick Medemblik, Department of Human Genetics, Amsterdam University Medical Center, Amsterdam, the Netherlands</li> <li>Pieter Neerincx, Department of Genetics, University Medical Center Groningen, Groningen, the Netherlands</li> <li>Ruben H.P. Vorderman, Department of Biomedical Data Sciences, Leiden University Medical Center, Leiden, the Netherlands</li> </ul> <p>You can provide feedback for this field standard, or leave comments or suggestions for improvement by filing an issue, which is open to everybody.</p> <p>The first version was released in April 2024, the date last modified will be present on the bottom of each page. </p>"},{"location":"control_of_documents/","title":"Control of documents","text":""},{"location":"control_of_documents/#bioinformaticians-can-benefit-from-a-different-qms","title":"Bioinformaticians can benefit from a different QMS","text":"<p>Bioinformaticians work in a fairly different environment than other disciplines of the medical laboratory, and the classic Quality Management System (QMS) used by the medical laboratory is often impractical for Bioinformaticians' needs. ISO-15189 specifies: \"Software procedures and related documentation need to be controlled\". This can be in any form or type of medium, as long as a certain set of requirements is achieved. Software is normally developed and distributed using version control systems, such as git. Platforms that provide repositories for these version control systems, like for example GitLab or GitHub, often offer extra functionalities related to code management by integrating the version control with other documentation or task management systems (for example to link a new release to a set of solved issues). Such integration possibilities makes them good candidates to provide a Bioinformatics QMS system. In this document, we offer guidelines on how to comply to ISO-15189 while implementing a Bioinformatics friendly QMS.</p> <p>Note that, documentation outside of the medical laboratories QMS should be traceable, i.e. references need to be made to the Bioinformatics QMS where applicable. </p>"},{"location":"control_of_documents/#iso-15189-requirements","title":"ISO-15189 requirements","text":"<p>To allow for a Bioinformatics friendly QMS while complying to the ISO-15189:2022 requirements, the following aspects need to be considered and documented:</p> <ol> <li>Documents are uniquely identified.</li> <li>Documents are approved for adequacy before issued by authorized personnel who have the expertise and competence to determine adequacy.</li> <li>Documents are periodically reviewed and updated as necessary.</li> <li>Relevant versions of applicable documents are available at points of use and, where necessary, their distribution is controlled.</li> <li>Changes and the current revision status of documents are identified.</li> <li>Documents are protected from unauthorized changes and any deletion or removal.</li> <li>Documents are protected from unauthorized access.</li> <li>The unintended use of obsolete documents is prevented, and suitable identification is applied to them if they are retained for any purpose.</li> <li>One paper or electronic copy of each obsolete controlled document is retained for a specified time period or in accordance with applicable specified requirements.</li> </ol>"},{"location":"control_of_documents/#candidates-for-a-bioinformatics-qms","title":"Candidates for a Bioinformatics QMS","text":"<p>Bioinformaticians create workflows collaboratively on a computer using version control software. Git is a distributed version control system that tracks changes in any set of computer files. This can be used to track the changes of the code itself, but also of its usage in Standard Operating Procedures (SOPs). Git provides unique identifiers to each change which can be used to integrate with documentation and issue management systems that allows to track issues and their resolution in detail. These integrations can also be used to identify each new release of a workflow and its newest features. As workflows often get upgraded and updated, the corresponding SOPs are subject to frequent changes as well.  </p> <p>Examples of git based systems are:</p> <ol> <li>GitHub pages</li> <li>GitLab pages</li> <li>Confluence</li> </ol> <p>Many of these tools, if used in a specific way, can allow Bioinformaticians to work in a comfortable environment, while complying to the ISO-15189 requirements. There are multiple ways to implement such a system, and as long as it is documented how your system complies to the ISO-15189 requirements, all is well. </p>"},{"location":"control_of_documents/#example-the-usage-of-gitlab-as-qms","title":"Example: The usage of GitLab as QMS","text":""},{"location":"control_of_documents/#central-gathering-of-all-sop-on-gitlab-pages","title":"Central gathering of all SOP on GitLab pages","text":"<p>Using GitLab pages and MkDocs, all SOPs can be stored in well structured documentation. Here we illustrate how GitLab complies to the ISO-15189:</p> <ol> <li> <p>Each SOP is a separate markdown file. Its name will include a number for easy and unique identification of the document. The numbering can also be used to classify each SOP into categories. Example:</p> </li> <li> <p>10 - Data Access</p> <ul> <li>11 - ExternalSequencers -&gt; 11_externalsequencers.md</li> <li>12 - InternalSequencers -&gt; 12_internalsequencers.md</li> </ul> </li> <li>20 - Data Processing<ul> <li>21 - WES -&gt; 21_wes_flow.md</li> <li>22 - RNAseq -&gt; 22_rnaseq_flow.md</li> </ul> </li> <li>30 - Data sharing<ul> <li>31 - Cluster -&gt; 31_share_cluster_user.md</li> <li>32 - External -&gt; 32_share_external_user.md</li> </ul> </li> </ol> <p>In this example, categories are used to seperate 3 flows: accessing data, processing data and sharing data, allowing intuitive navigation within the documentation depending on the action you are trying to perform.</p> <ol> <li> <p>The repository is set with special users type permissions and structure:</p> <ul> <li>In a Git way, a \"main\" branch corresponds to the \"production\" documentation, and a \"develop\" branch mirrors the main branch at first, and will then accumulate modifications that need to appear in the upcoming release of the documentation.</li> <li>Members can create issues to report inaccuracies or deficiencies within a specific document, or the need to create a new document.</li> <li>From any issue, a branch can be created by a Member from the \"develop\" branch to work on fixing the issue.</li> <li>Once the changes are ready, Members can submit their modification for review by a Documentation manager and if needed by an other additional Members.</li> <li>Members and Documentation managers may go into one or several review processes to further edit and revise the document.</li> <li>Once the document received its final modification, the Document manager can accept the merge request from \"feature\" to \"develop\".</li> <li>Documentation managers create new documentation releases by merging the \"develop\" branch into the \"main\" branch.</li> <li>Documentation managers create a new tag corresponding to the new version of the documentation and document the new features added in this new tag.</li> </ul> </li> <li> <p>At the footer of each page, you can see the date of last modification, which facilitates identification of outdated documents. However, a system must be put in place in order to ensure that each document is being periodically reviewed. This can be done in the format of a markdown table on the index page of the documentation, containing for each document its date of last modification and its status:</p> </li> </ol> Document Date Last Modified Up to date 11_externalsequencers.md 23/10/2023 yes 12_internalsequencers.md 23/10/2023 yes 21_wes_flow.md 05/11/2022 no 22_rnaseq_flow.md 25/12/2023 yes 31_share_cluster_user.md 13/09/2023 yes 32_share_external_user.md 13/09/2023 yes <p>This table should be edited by the Documentation managers when releasing a new version of the documentation, and can be reviewed periodically to check the status of each document.</p> <ol> <li> <p>The documentation is always available on GitLab to members of the Bioinformatics team. They can access only the production release.</p> </li> <li> <p>On the GitLab repository of the documentation, it would be a convention to create a tag and a release for every production version released. Going to this tag directory, you can see what changed for each release and hence for each document. Everything can be traced back using commits. On the documentation itself, you can also show which version you are currently browsing with the tag number, to be certain of what you are looking at.</p> </li> <li> <p>Only Documentation managers can remove or modify the production documentation. Each modification (which includes deletion) must be reviewed twice before being actually effectuated in production. First, a review is made from a \"feature\" to the \"develop\", and then an other review will be made from \"develop\" to the \"main\".</p> </li> <li> <p>Only members of the GitLab team can access the documentation.</p> </li> <li> <p>For each tag, you can access the release version of the documentation corresponding to the tag. So all is archived by default in an organized way.</p> </li> </ol>"},{"location":"feedback/","title":"Laboratory patients, user, and personnel feedback","text":"<p>Bioinformaticians develop data analysis workflows, tools and (web) applications that are used by different groups of end users. These end users could experience events where unexpected, incorrect or occasionally no results are produced, due to bugs. These bugs are caused by either errors, flaws or faults in the design, development, or operation of the software developed by the bioinformaticians. In addition, end users may come up with requests and suggestions for new features / functionality to further improve or expand the scope of existing software.</p> <p>We make a distinction to general feedback regarding user requests and issues that relate to the use of Bioinformatics software as described in this paragraph and more serious issues that have lead for instance to missed or wrong diagnoses or to delays that cause diagnostic results and reports to either contain serious errors or exceed the deadline. For guidelines on how to handle latter issues we refer to the paragraph on non-conforming work.</p> <p>Bioinformaticians should have a user feedback process through which both reports of issues / bugs and requests can be submitted, recorded and processed. When the issues have been handled and actions have been taken, results need to be communicated back to the end users.</p> <p>The user feedback process shall ensure that:</p> <ul> <li>Feedback and/or requests from end users can be submitted and recorded.</li> <li>Actions that are being taken to process the feedback / requests are recorded and communicated back to the users.</li> </ul> <p>Examples of systems that may be used (together) to collect and record feedback and requests that can be configured to meet the stated goals are</p> <ul> <li>A special purpose (non-personal) email address</li> <li>A ticketing system</li> <li>A web / service portal where issues / requests can be submitted by filling out forms</li> <li>Lab meetings where feature requests are discussed and minutes are recorded</li> <li>Built-in issue trackers of (Git) version control systems such as GitHub or GitLab</li> <li>Work management / Task planner systems such as JIRA, Microsoft Teams Planner, Azure DevOps services</li> </ul>"},{"location":"feedback/#non-conforming-work","title":"Non-conforming work","text":"<p>Laboratories should have a procedure in place to handle non-conforming work. Whether bugs or issues with Bioinformatics software need to be handled as non-conforming work will depend on the magnitude, impact and the occurrence (or probability / frequency of recurrence) of the issue in the diagnostic process. The following flow-chart will help to evaluate the severity of the issue in terms of these three criteria and gives guidance on the best course of action in handling the issue</p> <pre><code>graph TD\n    A[Did the issue cause a wrong or missed diagnosis or unacceptable delay ?]--&gt;B[yes];\n    A--&gt;D[no];\n    D--&gt;X[Perform an impact analysis]\n    X--&gt;Y[Issue has a high impact on diagnostic process]\n    X--&gt;Z[Issue has a low impact on diagnostic process]\n    Z--&gt;G\n    Y--&gt;C[Is there a temporary work-around that fixes the issue without changes to the code ? ];\n    B--&gt;E[QMS report non-conforming work];\n    M--&gt;F[Create a hotfix / patch release to fix the issue];\n    C--&gt;I[no];\n    C--&gt;J[yes];\n    J--&gt;G[Fix the bug in future regular release];\n    I--&gt;K[Is there a quick software patch to solve the issue]\n    K--&gt;L[no]\n    K--&gt;M[yes]\n    L--&gt;E</code></pre>"},{"location":"references/","title":"References","text":""},{"location":"references/#international-norms-and-standards","title":"International Norms and Standards","text":"<ul> <li>ISO-15189: Medical laboratories \u2014 Requirements for quality and competence</li> <li>IEC-62304: Medical device software \u2013 software life cycle processes</li> <li>ISO-14971: Medical devices \u2014 Application of risk management to medical devices</li> <li>ISO-22367: Medical laboratories \u2014 Application of risk management to medical laboratories</li> <li>ISO-27001: Information security management systems</li> </ul>"},{"location":"references/#european-laws-and-guidances","title":"European Laws and Guidances","text":"<ul> <li>IVDR, REGULATION (EU) 2017/746 OF THE EUROPEAN PARLIAMENT AND OF THE COUNCIL</li> <li>MDCG 2019-11 Guidance on Qualification and Classification of Software in MDR and IVDR</li> <li>Infographic, Is your software a Medical Device?</li> <li>MDCG 2020-1 Guidance on Clinical Evaluation (MDR) / Performance Evaluation (IVDR) of Medical Device Software</li> <li>MDCG 2020-16 Guidance on Classification Rules for in vitro Diagnostic Medical Devices</li> <li>MDCG 2023-1 Guidance on the health institution exemption under Article 5(5) of MDR and IVDR</li> </ul>"},{"location":"references/#publications","title":"Publications","text":"<ul> <li>van Deutekom HWM, Haitjema S. Recommendations for IVDR compliant in-house software development in clinical practice: a how-to paper with three use cases. Clin Chem Lab Med. 2022. PMID: 35538674.</li> <li>Bank PCD, Jacobs LHJ, van den Berg SAA, van Deutekom HWM, Hamann D, Molenkamp R, Ruivenkamp CAL, Swen JJ, Tops BBJ, Wamelink MMC, Wessels E, Oosterhuis WP. The end of the laboratory developed test as we know it? Recommendations from a national multidisciplinary taskforce of laboratory specialists on the interpretation of the IVDR and its complications. Clin Chem Lab Med. 2020 Nov 23. PMID: 33554568.</li> </ul>"},{"location":"references/#other","title":"Other","text":"<ul> <li>Guidance document for MRECS</li> <li>IMDRF/SaMD WG/N12FINAL:2014 \"Software as a Medical Device\": Possible Framework for Risk Categorization and Corresponding Consideration</li> </ul>"},{"location":"risk_management/","title":"Risk management","text":"<p>Both the ISO-15189 and the IVDR ask for risk management. The ISO-15189 requires risk management of the bioinformatics processes, e.g. SDLC, use of github, compute cluster, storage. The IVDR requires risk management of the in-house IVDs, hence all in-house developed software, e.g. analysis software. </p> <p>The bioinformatics risk assessment should integrate with the laboratory risk management procedure, which can use the existing method described in the laboratories QMS, such as SAFER (Stop, Assess, Formulate, Execute, and Review) or FMEA (Failure Modes and Effects Analysis). </p> <p>The risk management of bioinformatics processes and developed software should mention how often the risk analysis should be updated. While the bioinformatics processes could follow the medical laboratories revision period, it is recommended to revise the risk analysis for each release of software. Consequently, the risk analysis of developed software needs more frequent revision compared to that of tests in the medical laboratory. Maintaining two distinct documents \u2014 one for the laboratory test and another for bioinformatics software \u2014 could optimize the risk management process. As bioinformatics software is a part of the laboratory test, it should be clear which part of the laboratory test is covered by the bioinformatics risk analysis. For instance, for sequencing the bioinformatics risk analysis starts with the initial sequencer output and ends with the storage of results.</p>"},{"location":"risk_management/#risk-management-in-software-development-life-cycle","title":"Risk Management in Software Development Life Cycle","text":"<p>Risk management is part of the SDLC and is required for every (standalone) pipeline/workflow or software tool validated for diagnostics use. Risk management can be broken down into 6 steps, where step 2 and 3 should be part of the laboratories QMS. </p> <ol> <li>Risk Identification involves a comprehensive analysis of risk factors such as project scope, requirements, technology stack, resource availability, and external dependencies.    Typically, bioinformatics risks involve topics like:<ul> <li>Software goal</li> <li>Software installation (and dependencies)</li> <li>Running software tools</li> <li>Interactions / connections with databases / other software / other hardware</li> <li>Data storage</li> <li>User errors</li> <li>Compute environment is down / not reachable</li> <li>Technical challenges</li> <li>Resource constraints</li> </ul> </li> <li>Risk Assessment: Once risks are identified, they need to be evaluated to determine their potential impact and likelihood. This assessment allows prioritization, focusing on high-impact and high-probability risks. Risk assessment involves quantitative or qualitative analysis, aiding in the allocation of resources and attention to the most critical areas.</li> <li> <p>Risk Mitigation and Planning: Based on the risks assessment, risks must be mitigated. Risk can be mitigated by applying different strategies:</p> <ul> <li>Completely remove risk by adding software functionality, for example check user input before use.</li> <li>Decrease impact by adding software functionality, for example detect when a compute environment is down and email relevant users.</li> <li>Decrease impact by having backup system in place, for example a temporary compute environment.</li> <li>Decrease likelihood by providing clear instruction to end users.</li> </ul> </li> <li> <p>Monitoring and Control: Throughout the SDLC, continuous monitoring of identified risks and the effectiveness of mitigation strategies is crucial. Often risks are already identified and discussed during development, whether these are all documented depends on the risks.</p> </li> <li>Communication and Documentation: Clear communication of risks, mitigation strategies, and their progress is vital among team members, stakeholders. Comprehensive documentation of identified risks, their assessment, and the implemented mitigation measures aids in transparency and knowledge transfer, ensuring a cohesive approach.</li> <li>Adaptation to Change: Risks and their measures may evolve over time. Risks can be reassessed, and new ones may emerge. It is imperative that risk assessments maintain their relevance throughout the software life cycle. Therefore, risk management strategies should be flexible to accommodate changes and updates, and should contain a specific update interval. It is recommended to set this reevaluation interval to every major-minor software version and/or two times per year.</li> </ol> <p>In conclusion, risk management within the SDLC is an iterative and proactive approach to ensure the successful release of software projects while minimizing the impact of potential uncertainties.</p>"},{"location":"risk_management/#more-documentation","title":"More documentation","text":"<ul> <li>ISO-14971, Annex C Questions that can be used to identify medical device characteristics that could impact on safety</li> <li>ISO-22367, Annex D Identification of characteristics related to safety</li> <li>IEC-62304 Medical device software \u2013 software life cycle processes</li> <li>IMDRF/SaMD WG/N12FINAL:2014 \"Software as a Medical Device\": Possible Framework for Risk Categorization and Corresponding Consideration</li> </ul>"},{"location":"software_life_cycle_processes/","title":"Software Development Life Cycle processes","text":"<p>One of the main responsibilities of bioinformaticians working in a medical laboratory involves the development and maintenance of software used in diagnostic processes. The IEC-62304 description of the software development life cycle (SDLC) is consistent with the practices of most software-centric entities. SDLC processes that are commonly used include planning, requirements, architectural design, development, testing, deployment, and maintenance. Laboratories should establish documented guidelines that cover all SDLC these stages.</p>"},{"location":"software_life_cycle_processes/#1-planning","title":"1. Planning","text":"<p>Planning entails developing a comprehensive software development plan. This includes brainstorming the initial ideas, ideation of the final goal, determining the necessary resources, creating a schedule, and establishing achievable milestones. Bioinformaticians should establish a clear communication path with stakeholders during this stage to ensure that the plan meets the goal. Within a laboratory, software development often occurs in the background of laboratory tests. The laboratory therefore needs to develop a solid strategy for change management for its tests that emphasizes all these characteristics, and software development should be an integral part of this strategy. Smaller-scale software development and maintenance cycles that might not affect other areas of a laboratory should maintain a similar strategy, although on a smaller scale and less demanding. Guidelines should cover and define both large-scale and small-scale strategies.</p> <p>Examples of small scale and large scale projects could be:</p> <ul> <li>Small-scale: the adaptation of a new component to existing software</li> <li>Large-scale: developing entirely new software, big refactors of existing software or changes to algorithms</li> </ul>"},{"location":"software_life_cycle_processes/#2-requirements","title":"2. Requirements","text":"<p>This process involves gathering, documenting, and analyzing the software requirements. It includes capturing both functional and non-functional requirements that the software must fulfill to meet the intended use and comply with regulatory standards. These requirements should be stated as clear and complete as possible before starting on a project. Additionally, requirements should be stated in broad and unspecific form, as to not limit the bioinformatician too much when developing the software. Once these requirements have been implemented as features in the software, they should be validated before the software is released and used in production. The requirements may relate to several aspects, including:</p> <ul> <li>the performance of the desired software</li> <li>the computing environment</li> <li>compatibility</li> <li>input- and output-formats</li> <li>interfaces to other systems</li> <li>communication from the software</li> <li>security requirements</li> <li>user interfaces to the software</li> <li>data definitions</li> <li>installation and acceptance requirements</li> <li>requirements related to the methods of operation and maintenance</li> <li>network-related requirements</li> <li>user maintenance requirements</li> <li>regulatory requirements</li> </ul> <p>The bioinformatics team should have a standardized and documented approach for gathering requirements. One example strategy for capturing this, which is also well suited for medical laboratories, is to use user stories, as stakeholders in a medical laboratory have very specific needs and often find it difficult to translate these into well-defined technical requirements. Another strategy is to express the requirements in a form that is SMART.</p> <p>Guidelines should support the following processes to gather, convert, track, and update the requirements during a project:</p> <ol> <li>Collaboration when defining software requirements: Requirements can come from end-users, bioinformaticians and other stakeholders. Requirements should be discussed with the relevant stakeholders before adding, removing or altering them.</li> <li>Conversion of users' requirements into small, individual development tasks.</li> <li>An agreed-upon system to track requirements throughout the development process (e.g. in JIRA, Confluence, Azure DevOps, GitHub or GitLab).</li> <li>A plan for keeping in touch with end users throughout the different stages of the development process to avoid unexpected adjustments to requirements later on.</li> </ol> <p>The requirements may (and are likely to) change during the process, however, it is encouraged to evaluate if the project is still in line with the original requirements, so that 'scope creep' is prevented. A widely adopted software development strategy involves dividing a development project over several periods. It is advised to use an approach that enables the release of partial deliverables to users each period, which enables user feedback upon each deliverable during the entire lifetime of the project and provides ample opportunities for clarification and adaptation.</p>"},{"location":"software_life_cycle_processes/#3-design","title":"3. Design","text":"<p>Here the software architecture is defined, describing the high-level structure, components, interfaces, and interactions of the software system. The architectural design lays the groundwork for the detailed design and implementation phases.</p> <p>The following processes should be covered by the design phase:</p> <ol> <li>A coding policy that covers which language is used, how the language is formatted, dos and don'ts, and the use of inline documentation.    This policy is not to be strictly enforced, however it will open discussions on how the team likes its code    and lead to a more concise and unified coding strategy.</li> <li>Laboratories will have to document the architecture when the software is classified as class B or C according to the IEC-62304.</li> </ol>"},{"location":"software_life_cycle_processes/#4-development","title":"4. Development","text":"<p>The development stage will be the bulk of a project; here, code is created that will eventually define the software. Therefore, the software development process should include the use of:</p> <ol> <li>A decentralized code management system, such as Git, together with a centralized repository, such as GitHub, GitLab, or Bitbucket.</li> <li>A task management system seamlessly integrated with your Git development system to track and manage development tasks.</li> <li>Conducting code reviews, this enforces colleagues to have a look and understand what the code is doing and whether coding guidelines are followed.</li> </ol> <p>The following processes are strongly recommended:   3. A well-defined development and release cycle with set time periods for preparation, development, testing, and releasing. This allows multiple developers to work cohesively on the project and creates structured testing and release moments during the implementation and maintenance processes. It also enables ample opportunities for user reflection on the deliverables during the lifetime of projects.  4. Writing code with unit tests, see Software Verification &amp; Software Validation. This enables a wider understanding of parts of the code, as unit tests often embody general usage as well as very specific exceptions.   </p>"},{"location":"software_life_cycle_processes/#5-testing","title":"5. Testing","text":"<p>Before implementation, software should be extensively tested, verified, and validated. While ISO-15189 does not provide specific guidelines on how to conduct software validation, it emphasizes the importance of ensuring that software is validated and verified following recognized standards. Software verification and validation should be performed in accordance to this document Software Verification &amp; Software Validation.</p>"},{"location":"software_life_cycle_processes/#6-implementation","title":"6. Implementation","text":"<p>Once everything is ready, there are a few key processes that should be included in guidelines to facilitate the release of the software:</p> <ol> <li>The process for establishing a release. The exact time point at which software is released could be determined    by a Development &amp; Release cycle or be released in an independent manner.</li> <li>The process for performing a release should be well-defined.</li> <li>The software functionality and release date should be clearly communicated to end users.</li> </ol>"},{"location":"software_life_cycle_processes/#7-maintenance","title":"7. Maintenance","text":"<p>Maintenance primarily centers around fixing bugs, monitoring the software, introducing new features, and upgrading to newer versions with new requirements. The process follows the same procedures as the development, testing, and implementation phases. Only certain maintenance processes that deviate from the normal procedures for development, testing, and implementation should be documented (such as hotfixes).</p>"},{"location":"software_life_cycle_processes/#hotfixes","title":"Hotfixes","text":"<p>Hotfixes are updates which are directly uploaded in to the actual live software without going through the development, testing and implementation phases of the SDLC. They are meant as a quick way to fix unforeseen but process breaking bugs. In general, having well-defined development, testing and implementation processes would negate the need for hotfixes. However, there is always the possibility for bugs to occur, or for interactions with other (third party) software to change. The process of performing a hotfix should be documented. </p> <p>Hotfixes could be classified as non-conforming work and might need to be followed up through the laboratories QMS, more on this in user feedback</p>"},{"location":"soups/","title":"SOUPS - Software of Unknown Provenance","text":"<p>Software of unknown provenance (SOUPS) is a software item that is already developed, generally available and not developed for the purpose of being incorporated into the bioinformatic workflow, or a software item for which adequate software documentation is not available. A procedure should be documented about how and where SOUPS are registered.</p> <p>For each SOUP the following items should be registered:</p> <ul> <li>Name: Name of SOUP.</li> <li>Reference: Link (URL) to soup (source code / publication).</li> <li>Intended purpose: Description of the original purpose of the SOUP.</li> <li>Used according to the intended purpose: yes/no, if no, document for which purpose the SOUP is used.</li> <li>Validation required: yes/no, often this is part of the validation of the (workflow) release itself. When using the SOUP outside of its intended purpose you need a proper validation to show that it works.</li> <li>Version controlled: yes/no, is the SOUP developed under version control or not.</li> </ul>"},{"location":"verification_validation/","title":"Software Verification &amp; Software Validation","text":"<p>Software verification and Software validation is necessary to ensure clinical accuracy of the analysis performed.</p> <p>The following citation is taken from IMDRF/SaMD WG/N23 FINAL:2015 \"Software as a Medical Device (SaMD): Application of Quality Management System \"</p> <p>Verification and Validation</p> <p>The verification and validation (V&amp;V) activities should be targeted towards the criticality and impact to patient safety of the SaMD, as discussed in IMDRF/SaMD WG/N12. Typically, verification (providing assurance that the design and development activity at each development stage conforms to the requirements) and validation (providing reasonable confidence that the software meets its intended use/user needs and operational requirements) activities ensure that all elements from the SaMD design and development\u2014including any changes made during maintenance/upgrades\u2014have been implemented correctly and that objective evidence of this implementation is recorded.</p> <p>In short, Barry Boehm expressed the difference between the software verification and software validation as follows:</p> <p>Verification: Are we building the product right?         Validation: Are we building the right product?</p> <p>Hence, for each release Software verification and Software validation is required.</p>"},{"location":"verification_validation/#software-verification","title":"Software verification","text":"<p>The IEC-62304 mentions different aspects of verification; i.e. software unit verification and software integration testing, and validation; i.e. software system test.</p> <p>Testing whether the code is correctly developed should be done on different levels, such as:</p> <ul> <li>Code reviews</li> <li>Unit testing</li> <li>Integration testing</li> <li>End to end workflow tests</li> </ul> <p>In case of automated testing, there must be a procedure of how the results are checked. I.e. a merge request is not possible when automated testing fails, or registering the passing of all automated testing among other verification results. The extent of software verification performed by the Bioinformaticians will differ in each team, it should be clear from the procedure which software verification should be performed.</p>"},{"location":"verification_validation/#software-validation","title":"Software validation","text":"<p>In order to support the repeatability of the validation, the following must be registered:</p> <ul> <li>The person executing the test</li> <li>The person evaluating the test</li> <li>Date of the test</li> <li>The software tested, including its version or commit number</li> <li>If applicable: configuration, hardware, testing tools</li> <li>The test, including steps to take the test, expected results and acceptance criteria</li> <li>The results, including samples used</li> <li>The evaluation of the test</li> <li>Conclusion of the test</li> </ul> <p>Software validation tests should be executed by an end user and preferably independent from the person who developed and wrote the software. For example, someone from the laboratory when the end result is mostly used by the laboratory, or a bioinformatician when bioinformatics expertise is needed for performing the validation.</p> <p>ISO-15189 states that the validation shall be as extensive as is necessary and confirm, through the provision of objective evidence in the form of performance specifications, that the specific requirements for the intended use of the examination have been fulfilled. This indicates that depending on the amount of changes of the new release, the validation could be any length. Sometimes a single note could be enough. For example, for a hotfix where the paths are now correctly stated, a note saying \"tested in the first production run, the result files are now saved in the corrected path\". Or \u201cOnly an integration test has been performed due to a change of a parameter. There were no issues with the first analysis\u201d. There should always be a record of the validation.</p> <p>Depending on the changes in the software, and in particular for the first version of the software a performance evaluation is needed. MDCG 2020-1 (Guidance on Clinical Evaluation (MDR) / Performance Evaluation (IVDR) of Medical Device Software) could help in determining the extend of the validation and/or the number of samples needed. Note that, this guidance helps with Chapter VI of the IVDR, which is not mentioned in article 5.5 for in house developed tests, but could give guidance to define the extend of your validation. For example the following points taken from MDCG 2020-1.</p> <p>For Human Genetics, specific GIAB samples are used for performance evaluation. In general, depending on the intended purpose of the software, several specific samples can be selected to validate the software. For updated tools, one could use the previously validated results for comparison. For new tools, one could choose to validate the outcome by eye, for example in IGV.</p>"},{"location":"verification_validation/#sufficient-amount","title":"Sufficient amount","text":"<ul> <li>Does the data support the intended use, indications, target groups, clinical claims and     contraindications?</li> <li>Have the clinical risks and analytical performance/clinical performance been investigated?</li> <li>Have relevant MDSW\u2019s characteristics, such as the data input and output, the applied algorithms     or type of interconnection been considered when generating the data to support the performance of     the device?</li> <li>What is the grade of innovation/history on the market (how big is the body of scientific evidence)?</li> <li>Other, as applicable.</li> </ul>"},{"location":"verification_validation/#sufficient-quality","title":"Sufficient quality","text":"<ul> <li>Were the type and the design of the study/test appropriate to meet the research objectives?</li> <li>Was the data set appropriate and actual (state of the art)?</li> <li>Was the statistical approach appropriate to reach a valid conclusion?</li> <li>Were all ethical, legal and regulatory considerations/requirements taken into account?</li> <li>Is there any conflict of interest?</li> </ul>"},{"location":"verification_validation/#choice-of-tools-andor-settings","title":"Choice of tools and/or settings","text":"<p>A subject missing in software verification and software validation is how specific tools and/or settings have been selected. One could add a section to the software validation document with an introduction into the issue, the choices made, the results, and the conclusions.</p>"},{"location":"verification_validation/#builds-databases-reference-sets-etc","title":"Builds, databases, reference sets etc.","text":"<p>Bioinformatic workflows often use (external) databases, reference sets, or specific genome builds. The link to them could be hardcoded, hence, updating them should follow software verification and validation as described above. The clinical validation of new database/reference set/genome build could be done either with the medical laboratories validation procedures or the software validation. Choose the kind of validation that works best for this particular update. Note that, linking to external databases for which changes and updates cannot be foreseen is a risk. Validate these databases with each release, this could be a simple check whether the functionality is still present. Make sure you have a risk assessments on these external databases.</p>"}]}